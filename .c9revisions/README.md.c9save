{"ts":1372365855074,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"m\n==\n\nGenerical macro madness!\n"]],"start1":0,"start2":0,"length1":0,"length2":31}]],"length":31}
{"contributors":[],"silentsave":true,"ts":1372365827333,"patch":[[{"diffs":[[0,"adness!\n"],[1,"\n<!--\n\n\n\nConventions:\n\nLibrary Prefix: 'm'\n\nScope: \n    A letter and name used to identify a specific aspect of the library\n    E.g. Containers have the scope 'c (cdt)', Exceptions have the scope 'x (xc)'\n\nScope Prefix:\n    Simply Library Prefix + Scope Letter.\n\nClass Name:\n    A letter and name used to identify a class pertaining to a specific scope.\n    E.g.: Lists in the Container scope have the classname 'l (list)'.\n    \nMethod Names:\n    Method names have at least 2 characters, and starts with a lowercase letter.\n    Underlines are not valid.\n    Camel case is valid, but avoided. Instead, reduce the names of the methods.\n    E.g.: 'add', 'push', etc\n\nMacro Method Names:\n    Follows the same conventions of method names, with the exception that\n    the name is all uppercase.\n    Macro functions usually doesn't map to their equivalent concrete ones.\n    E.g.: 'ADD', 'PUSH', etc\n\nType Suffixes:\n    All suffixes starts with '_'.\n    - (No suffix): Generally, the same as 't'.\n    - 't': The type. Must be properly typedef'd.\n    - 'p': Pointer for the type. Must be properly typedef'd.\n    - 'i': Iterator type to the type. Must be properly typedef'd.\n    - 'ip': Pointer to the iterator. Must be properly typedef'd.\n    - 'k<i>': Key type, for containers. In case there's more than one type,\n        they'll be numbered as 'i' (e.g. k1, k2, k3, etc), with k1 == k.\n        Must be properly typedef'd.\n    - 'v<i>': Same as 'k<i>', but for values.\n\nSpecial Suffixes:\n    Suffixes with special usages.\n    They always come last in the name.\n    All suffixes starts with '_'.\n    - 'USERAPI': Markers for public user functions.\n    - 'USERDATA': Marker for public user data and variables.\n    - 'USERIAPI': Markers for internal user functions.\n    - 'USERIDATA': Marker for internal user data and variables.\n    - 'DECT': Emits typedefs and function/variable declarations.\n    - 'DECS': Emits structures, unions and enums definitions.\n    - 'DECL': Same as DECT followed by DECS.\n    - 'DEFN': Defines functions and initialize variables.\n        Implies that DECL was previously done.\n    - 'DINIT': All at once (DECL and DEFN).\n\n\n*/\n\n/*\n\nm  - [macro]  macro type\nmx - [xc]     exception handling\n    mxc  - [mx_exc] Exception\nmt - [type]   generic type library\n    mt   - []\n    mtsz - [mt_sz]\nmm - [mem]    memory management\nmc - [adc]    abstract data container\nms - [stream] stream type\n\nmp - [thread] Threading and \n\nmc    - type to be used on functions (generally a value)\nmc_t  - object's type\nmc_p  - pointer type\nmc_pd - pointer diff\nmc_sz - object size\n\nmc_i  - iterator\nmc_k  - key type\nmc_v  - value type\n\n#include \"m/adc/vector.h\"\n\nmc(l_i) c = mc_new(l_i)();\n\n\nmx_ON(i)(v)\n    printf(\"Not caught, %d\", v);\n\nmx_TRY(i)\n    mx_THROW(10);\nmx_CATCH(i)(v)\n\tprintf(\"%d\", v);\nmx_FINALLY\n\tprintf(\"finished\");\n\n\nLIBRARY TYPES\n\n# Base\nc  - ctnr\ne  - elem (type)\ni  - iter\n\n# Nodes\nan - array (node)\npn - pair (node)\nln - listnode\nfn - flistnode\ngn - graphnode\ntn - treenode\n\n# Abstract\na  - array\nv  - vector\nbv - bitvector\nd  - deque\nl  - list\nfl - flist\ns  - treeset\nhs - hashset\nm  - treemap\nhm - hashmap\n\n# Adaptors\nb  - buffer\nq  - queue\npq - pqueue\nk  - stack\nt  - tree\ng  - graph\n\n# Types\nc   - char\nw   - wchar_t\nsz  - size_t\no   - offset_t\npd  - ptrdiff_t\ns   - short\ni   - int\nl   - long\nll  - long long\nuc  - unsigned char\nus  - unsigned short\nui  - unsigned int\nul  - unsigned long\null - unsigned long long\n8   - int8\n16  - int16\n32  - int32\n64  - int64\nu8  - uint8\nu16 - uint16\nu32 - uint32\nu64 - uint64\nf   - float\nd   - double\nld  - long double\nf32 - float32\nf64 - float64\np   - void*\nb   - char* (buffer)\ncs  - char*\nws  - wchar_t*\nmbs - char* (multi-byte)\n\n--"]],"start1":23,"start2":23,"length1":8,"length2":3698}]],"length":3721,"saved":false}
{"ts":1372365831268,"patch":[[{"diffs":[[0,"yte)\n\n--"],[1,">"]],"start1":3713,"start2":3713,"length1":8,"length2":9}]],"length":3722,"saved":false}
{"contributors":[],"silentsave":true,"ts":1372366193646,"patch":[[{"diffs":[[0,"adness!\n"],[1,"\n<!--\n\n\nConventions:\n\nLibrary Prefix: 'm'\n\nScope: \n    A letter and name used to identify a specific aspect of the library\n    E.g. Containers have the scope 'c (cdt)', Exceptions have the scope 'x (xc)'\n\nScope Prefix:\n    Simply Library Prefix + Scope Letter.\n\nClass Name:\n    A letter and name used to identify a class pertaining to a specific scope.\n    E.g.: Lists in the Container scope have the classname 'l (list)'.\n    \nMethod Names:\n    Method names have at least 2 characters, and starts with a lowercase letter.\n    Underlines are not valid.\n    Camel case is valid, but avoided. Instead, reduce the names of the methods.\n    E.g.: 'add', 'push', etc\n\nMacro Method Names:\n    Follows the same conventions of method names, with the exception that\n    the name is all uppercase.\n    Macro functions usually doesn't map to their equivalent concrete ones.\n    E.g.: 'ADD', 'PUSH', etc\n\nType Suffixes:\n    All suffixes starts with '_'.\n    - (No suffix): Generally, the same as 't'.\n    - 't': The type. Must be properly typedef'd.\n    - 'p': Pointer for the type. Must be properly typedef'd.\n    - 'i': Iterator type to the type. Must be properly typedef'd.\n    - 'ip': Pointer to the iterator. Must be properly typedef'd.\n    - 'k<i>': Key type, for containers. In case there's more than one type,\n        they'll be numbered as 'i' (e.g. k1, k2, k3, etc), with k1 == k.\n        Must be properly typedef'd.\n    - 'v<i>': Same as 'k<i>', but for values.\n\nSpecial Suffixes:\n    Suffixes with special usages.\n    They always come last in the name.\n    All suffixes starts with '_'.]\n    =\n    - 'USERAPI': Markers for public user functions.\n    - 'USERDATA': Marker for public user data and variables.\n    - 'USERIAPI': Markers for internal user functions.\n    - 'USERIDATA': Marker for internal user data and variables.\n    - 'DECT': Emits typedefs and function/variable declarations.\n    - 'DECS': Emits structures, unions and enums definitions.\n    - 'DECL': Same as DECT followed by DECS.\n    - 'DEFN': Defines functions and initialize variables.\n        Implies that DECL was previously done.\n    - 'DINIT': All at once (DECL and DEFN).\n\n\n*/\n\n/*\n\nm  - [macro]  macro type\nmx - [xc]     exception handling\n    mxc  - [mx_exc] Exception\nmt - [type]   generic type library\n    mt   - []\n    mtsz - [mt_sz]\nmm - [mem]    memory management\nmc - [adc]    abstract data container\nms - [stream] stream type\n\nmp - [thread] Threading and \n\nmc    - type to be used on functions (generally a value)\nmc_t  - object's type\nmc_p  - pointer type\nmc_pd - pointer diff\nmc_sz - object size\n\nmc_i  - iterator\nmc_k  - key type\nmc_v  - value type\n\n#include \"m/adc/vector.h\"\n\nmc(l_i) c = mc_new(l_i)();\n\n\nmx_ON(i)(v)\n    printf(\"Not caught, %d\", v);\n\nmx_TRY(i)\n    mx_THROW(10);\nmx_CATCH(i)(v)\n\tprintf(\"%d\", v);\nmx_FINALLY\n\tprintf(\"finished\");\n\n\nLIBRARY TYPES\n\n# Base\nc  - ctnr\ne  - elem (type)\ni  - iter\n\n# Nodes\nan - array (node)\npn - pair (node)\nln - listnode\nfn - flistnode\ngn - graphnode\ntn - treenode\n\n# Abstract\na  - array\nv  - vector\nbv - bitvector\nd  - deque\nl  - list\nfl - flist\ns  - treeset\nhs - hashset\nm  - treemap\nhm - hashmap\n\n# Adaptors\nb  - buffer\nq  - queue\npq - pqueue\nk  - stack\nt  - tree\ng  - graph\n\n# Types\nc   - char\nw   - wchar_t\nsz  - size_t\no   - offset_t\npd  - ptrdiff_t\ns   - short\ni   - int\nl   - long\nll  - long long\nuc  - unsigned char\nus  - unsigned short\nui  - unsigned int\nul  - unsigned long\null - unsigned long long\n8   - int8\n16  - int16\n32  - int32\n64  - int64\nu8  - uint8\nu16 - uint16\nu32 - uint32\nu64 - uint64\nf   - float\nd   - double\nld  - long double\nf32 - float32\nf64 - float64\np   - void*\nb   - char* (buffer)\ncs  - char*\nws  - wchar_t*\nmbs - char* (multi-byte)\n\n-->"]],"start1":23,"start2":23,"length1":8,"length2":3705}]],"length":3728,"saved":false}
{"ts":1372366194676,"patch":[[{"diffs":[[0,"'_'."],[-1,"]"],[0,"\n    ="],[1," "],[0,"\n   "]],"start1":1613,"start2":1613,"length1":15,"length2":15}]],"length":3728,"saved":false}
{"ts":1372366200238,"patch":[[{"diffs":[[0,"_'.\n    "],[-1,"= "],[1,"- 'USER"],[0,"\n    - '"]],"start1":1614,"start2":1614,"length1":18,"length2":23}]],"length":3733,"saved":false}
{"ts":1372366203239,"patch":[[{"diffs":[[0," - 'USER"],[1,"STRUCT': "],[0,"\n    - '"]],"start1":1621,"start2":1621,"length1":16,"length2":25}]],"length":3742,"saved":false}
{"ts":1372366207202,"patch":[[{"diffs":[[0,"TRUCT': "],[1,"Markers for "],[0,"\n    - '"]],"start1":1630,"start2":1630,"length1":16,"length2":28}]],"length":3754,"saved":false}
{"ts":1372366207907,"patch":[[{"diffs":[[0,"ers for "],[1,"s"],[0,"\n    - '"]],"start1":1642,"start2":1642,"length1":16,"length2":17}]],"length":3755,"saved":false}
{"ts":1372366210243,"patch":[[{"diffs":[[0,"rs for s"],[1,"tructures, u"],[0,"\n    - '"]],"start1":1643,"start2":1643,"length1":16,"length2":28}]],"length":3767,"saved":false}
{"ts":1372366214659,"patch":[[{"diffs":[[0,"tures, u"],[1,"nions"],[0,"\n    - '"]],"start1":1655,"start2":1655,"length1":16,"length2":21}]],"length":3772,"saved":false}
{"ts":1372366215179,"patch":[[{"diffs":[[0,"tructure"],[-1,"s, unions"],[0,"\n    - '"]],"start1":1651,"start2":1651,"length1":25,"length2":16}]],"length":3763,"saved":false}
{"ts":1372366215966,"patch":[[{"diffs":[[0," structu"],[-1,"re"],[0,"\n    - '"]],"start1":1649,"start2":1649,"length1":18,"length2":16}]],"length":3761,"saved":false}
{"ts":1372366221710,"patch":[[{"diffs":[[0,"r struct"],[-1,"u"],[1,"s and unions."],[0,"\n    - '"]],"start1":1648,"start2":1648,"length1":17,"length2":29}]],"length":3773,"saved":false}
{"ts":1372366270809,"patch":[[{"diffs":[[0,"USER"],[-1,"STRUCT"],[1,"TYPE"],[0,"': M"]],"start1":1625,"start2":1625,"length1":14,"length2":12}]],"length":3771,"saved":false}
{"ts":1372366278835,"patch":[[{"diffs":[[0," - 'USER"],[-1,"TYPE"],[1,"STRUCT"],[0,"': Marke"]],"start1":1621,"start2":1621,"length1":20,"length2":22}]],"length":3773,"saved":false}
{"ts":1372367077130,"patch":[[{"diffs":[[0," the library"],[1,".\n    T"],[0,"\n    E.g. Co"]],"start1":141,"start2":141,"length1":24,"length2":31}]],"length":3780,"saved":false}
{"ts":1372367083180,"patch":[[{"diffs":[[0,"y.\n    T"],[1,"ypes and classes for a specific sco"],[0,"\n    E.g"]],"start1":152,"start2":152,"length1":16,"length2":51}]],"length":3815,"saved":false}
{"ts":1372367085127,"patch":[[{"diffs":[[0,"ific sco"],[1,"pe are exc"],[0,"\n    E.g"]],"start1":187,"start2":187,"length1":16,"length2":26}]],"length":3825,"saved":false}
{"ts":1372367087602,"patch":[[{"diffs":[[0," are exc"],[1,"lusive "],[0,"\n    E.g"]],"start1":197,"start2":197,"length1":16,"length2":23}]],"length":3832,"saved":false}
{"ts":1372367093678,"patch":[[{"diffs":[[0,"    "],[-1,"Types and classes for a specific scope are exclusive "],[1,"Names for that scope"],[0,"\n   "]],"start1":155,"start2":155,"length1":61,"length2":28}]],"length":3799,"saved":false}
{"ts":1372367098207,"patch":[[{"diffs":[[0,"ry.\n    "],[-1,"N"],[1,"Type n"],[0,"ames for"]],"start1":151,"start2":151,"length1":17,"length2":22},{"diffs":[[0,"at scope"],[1," are excl"],[0,"\n    E.g"]],"start1":176,"start2":176,"length1":16,"length2":25}]],"length":3813,"saved":false}
{"ts":1372367098689,"patch":[[{"diffs":[[0,"are excl"],[1,"usi"],[0,"\n    E.g"]],"start1":185,"start2":185,"length1":16,"length2":19}]],"length":3816,"saved":false}
{"ts":1372367101946,"patch":[[{"diffs":[[0," exclusi"],[1,"ve to it.\n    Th"],[0,"\n    E.g"]],"start1":188,"start2":188,"length1":16,"length2":32}]],"length":3832,"saved":false}
{"ts":1372367105974,"patch":[[{"diffs":[[0,"ve to it"],[1,", meaning that"],[0,".\n    Th"],[1,"e"],[0,"\n    E.g"]],"start1":196,"start2":196,"length1":24,"length2":39}]],"length":3847,"saved":false}
{"ts":1372367107896,"patch":[[{"diffs":[[0,"ing that"],[1," they    "],[0,".\n    Th"]],"start1":210,"start2":210,"length1":16,"length2":25}]],"length":3856,"saved":false}
{"ts":1372367108916,"patch":[[{"diffs":[[0,"hat they"],[-1,"    "],[1,"'"],[0,".\n    Th"]],"start1":215,"start2":215,"length1":20,"length2":17}]],"length":3853,"saved":false}
{"ts":1372367109466,"patch":[[{"diffs":[[0,"at they'"],[1,"r"],[0,".\n    Th"]],"start1":216,"start2":216,"length1":16,"length2":17}]],"length":3854,"saved":false}
{"ts":1372367113532,"patch":[[{"diffs":[[0,"t they'r"],[-1,".\n    The"],[1,"e named\n    so as to "],[0,"\n    E.g"]],"start1":217,"start2":217,"length1":25,"length2":37}]],"length":3866,"saved":false}
{"ts":1372367114048,"patch":[[{"diffs":[[0,"o as to "],[1,"not "],[0,"\n    E.g"]],"start1":238,"start2":238,"length1":16,"length2":20}]],"length":3870,"saved":false}
{"ts":1372367123209,"patch":[[{"diffs":[[0," to not "],[1,"clash with another scope's typename."],[0,"\n    E.g"]],"start1":242,"start2":242,"length1":16,"length2":52}]],"length":3906,"saved":false}
{"ts":1372367130599,"patch":[[{"diffs":[[0,"    "],[-1,"Type names for that scope are exclusive to it, meaning that they're named\n    so as to not clash with another scope's typename."],[0,"\n   "]],"start1":155,"start2":155,"length1":135,"length2":8}]],"length":3779,"saved":false}
{"ts":1372367131908,"patch":[[{"diffs":[[0,"ibrary.\n"],[-1,"    \n"],[0,"    E.g."]],"start1":147,"start2":147,"length1":21,"length2":16}]],"length":3774,"saved":false}
{"ts":1372367135677,"patch":[[{"diffs":[[0,"', etc\n\n"],[1,"T\n\n"],[0,"Type Suf"]],"start1":917,"start2":917,"length1":16,"length2":19}]],"length":3777,"saved":false}
{"ts":1372367137062,"patch":[[{"diffs":[[0,", etc\n\nT"],[1,"ype"],[0,"\n\nType S"]],"start1":918,"start2":918,"length1":16,"length2":19}]],"length":3780,"saved":false}
{"ts":1372367139685,"patch":[[{"diffs":[[0,"', etc\n\n"],[1,"User "],[0,"Type\n\nTy"]],"start1":917,"start2":917,"length1":16,"length2":21}]],"length":3785,"saved":false}
{"ts":1372367142977,"patch":[[{"diffs":[[0,"ser Type"],[1,"name:\n"],[0,"\n\nType S"]],"start1":926,"start2":926,"length1":16,"length2":22}]],"length":3791,"saved":false}
{"ts":1372367143464,"patch":[[{"diffs":[[0,"pename:\n"],[1,"    "],[0,"\n\nType S"]],"start1":932,"start2":932,"length1":16,"length2":20}]],"length":3795,"saved":false}
{"ts":1372367144229,"patch":[[{"diffs":[[0,"me:\n    "],[1,"Type names for that scope are exclusive to it, meaning that they're named\n    so as to not clash with another scope's typename."],[0,"\n\nType S"]],"start1":936,"start2":936,"length1":16,"length2":143}]],"length":3922,"saved":false}
{"ts":1372367152315,"patch":[[{"diffs":[[0,"Type"],[-1," "],[0,"names "],[-1,"for that scope are exclusive to it, meaning that they're named\n    so as to not clash with another scope's typename."],[1,"are p"],[0,"\n\nTy"]],"start1":944,"start2":944,"length1":131,"length2":19}]],"length":3810,"saved":false}
{"ts":1372367157650,"patch":[[{"diffs":[[0,"es are p"],[1,"rovided by the user, "],[0,"\n\nType S"]],"start1":951,"start2":951,"length1":16,"length2":37}]],"length":3831,"saved":false}
{"ts":1372367164595,"patch":[[{"diffs":[[0,"e user, "],[1,"and are exclusive to a specific"],[0,"\n\nType S"]],"start1":972,"start2":972,"length1":16,"length2":47}]],"length":3862,"saved":false}
{"ts":1372367165090,"patch":[[{"diffs":[[0,"specific"],[1,"\n    "],[0,"\n\nType S"]],"start1":1003,"start2":1003,"length1":16,"length2":21}]],"length":3867,"saved":false}
{"ts":1372367168039,"patch":[[{"diffs":[[0,"fic\n    "],[1,"scope"],[0,"\n\nType S"]],"start1":1008,"start2":1008,"length1":16,"length2":21}]],"length":3872,"saved":false}
{"ts":1372367175536,"patch":[[{"diffs":[[0,"sive to "],[-1,"a specific"],[1,"the scope they were registered"],[0,"\n    sco"]],"start1":993,"start2":993,"length1":26,"length2":46}]],"length":3892,"saved":false}
{"ts":1372367179503,"patch":[[{"diffs":[[0,"they"],[1,"\n   "],[0," were "],[-1,"registered"],[1,"declared wi"],[0,"\n   "]],"start1":1011,"start2":1011,"length1":24,"length2":29}]],"length":3897,"saved":false}
{"ts":1372367180715,"patch":[[{"diffs":[[0,"lared wi"],[1,"th"],[0,"\n    sco"]],"start1":1028,"start2":1028,"length1":16,"length2":18}]],"length":3899,"saved":false}
{"ts":1372367182216,"patch":[[{"diffs":[[0,"with"],[-1,"\n    scope"],[1,"."],[0,"\n\nTy"]],"start1":1034,"start2":1034,"length1":18,"length2":9}]],"length":3890,"saved":false}
{"ts":1372367186699,"patch":[[{"diffs":[[0,"eclared "],[-1,"with"],[1,"into"],[0,".\n\nType "]],"start1":1026,"start2":1026,"length1":20,"length2":20}]],"length":3890,"saved":false}
{"ts":1372367190911,"patch":[[{"diffs":[[0,"ed into."],[1,"\n    E."],[0,"\n\nType S"]],"start1":1031,"start2":1031,"length1":16,"length2":23}]],"length":3897,"saved":false}
{"ts":1372367194249,"patch":[[{"diffs":[[0,"to.\n    "],[-1,"E."],[1,"Th\n    E.g.: "],[0,"\n\nType S"]],"start1":1036,"start2":1036,"length1":18,"length2":29}]],"length":3908,"saved":false}
{"ts":1372367194754,"patch":[[{"diffs":[[0,".\n    Th"],[1,"e n"],[0,"\n    E.g"]],"start1":1038,"start2":1038,"length1":16,"length2":19}]],"length":3911,"saved":false}
{"ts":1372367196040,"patch":[[{"diffs":[[0,"   The n"],[1,"ame of"],[0,"\n    E.g"]],"start1":1041,"start2":1041,"length1":16,"length2":22}]],"length":3917,"saved":false}
{"ts":1372367198120,"patch":[[{"diffs":[[0," name of"],[1," the t"],[0,"\n    E.g"]],"start1":1047,"start2":1047,"length1":16,"length2":22}]],"length":3923,"saved":false}
{"ts":1372367203711,"patch":[[{"diffs":[[0,"The "],[1,"type"],[0,"name "],[-1,"of th"],[1,"will always b"],[0,"e "],[-1,"t"],[0,"\n   "]],"start1":1044,"start2":1044,"length1":21,"length2":32}]],"length":3934,"saved":false}
{"ts":1372367209702,"patch":[[{"diffs":[[0,"to.\n"],[-1,"    The typename will always be \n"],[0,"    "]],"start1":1036,"start2":1036,"length1":41,"length2":8},{"diffs":[[0,"E.g.: \n\n"],[1,"\n\n"],[0,"Type Suf"]],"start1":1044,"start2":1044,"length1":16,"length2":18}]],"length":3903,"saved":false}
{"ts":1372367210704,"patch":[[{"diffs":[[0,"E.g.: \n\n"],[1,"R"],[0,"\n\nType S"]],"start1":1044,"start2":1044,"length1":16,"length2":17}]],"length":3904,"saved":false}
{"ts":1372367212804,"patch":[[{"diffs":[[0,".g.: \n\nR"],[1,"ealized"],[0,"\n\nType S"]],"start1":1045,"start2":1045,"length1":16,"length2":23}]],"length":3911,"saved":false}
{"ts":1372367216719,"patch":[[{"diffs":[[0,"d into.\n"],[1,"    Typenames must \n"],[0,"    E.g."]],"start1":1032,"start2":1032,"length1":16,"length2":36}]],"length":3931,"saved":false}
{"ts":1372367217346,"patch":[[{"diffs":[[0,"es must "],[1,"com"],[0,"\n    E.g"]],"start1":1051,"start2":1051,"length1":16,"length2":19}]],"length":3934,"saved":false}
{"ts":1372367219583,"patch":[[{"diffs":[[0,"must com"],[1,"pile into"],[0,"\n    E.g"]],"start1":1054,"start2":1054,"length1":16,"length2":25}]],"length":3943,"saved":false}
{"ts":1372367225919,"patch":[[{"diffs":[[0,"ust "],[-1,"compile into"],[1,"resolve into a single token"],[0,"\n   "]],"start1":1055,"start2":1055,"length1":20,"length2":35}]],"length":3958,"saved":false}
{"ts":1372367227693,"patch":[[{"diffs":[[0,"le token"],[1,", e."],[0,"\n    E.g"]],"start1":1078,"start2":1078,"length1":16,"length2":20}]],"length":3962,"saved":false}
{"ts":1372367229149,"patch":[[{"diffs":[[0,"oken, e."],[1,"g. "],[0,"\n    E.g"]],"start1":1082,"start2":1082,"length1":16,"length2":19}]],"length":3965,"saved":false}
{"ts":1372367235152,"patch":[[{"diffs":[[0," token, "],[-1,"e.g. "],[1,"meaning that they must b"],[0,"\n    E.g"]],"start1":1080,"start2":1080,"length1":21,"length2":40}]],"length":3984,"saved":false}
{"ts":1372367237391,"patch":[[{"diffs":[[0,"y must b"],[1,"e a valid"],[0,"\n    E.g"]],"start1":1104,"start2":1104,"length1":16,"length2":25}]],"length":3993,"saved":false}
{"ts":1372367241195,"patch":[[{"diffs":[[0,"hey must"],[1,"\n   "],[0," be a va"]],"start1":1102,"start2":1102,"length1":16,"length2":20},{"diffs":[[0," a valid"],[1," "],[0,"\n    E.g"]],"start1":1117,"start2":1117,"length1":16,"length2":17}]],"length":3998,"saved":false}
{"ts":1372367243840,"patch":[[{"diffs":[[0,"a valid "],[1,"identifier."],[0,"\n    E.g"]],"start1":1118,"start2":1118,"length1":16,"length2":27}]],"length":4009,"saved":false}
{"ts":1372367250799,"patch":[[{"diffs":[[0,"n, m"],[-1,"eaning"],[1,"ore specifically,"],[0," tha"]],"start1":1085,"start2":1085,"length1":14,"length2":25}]],"length":4020,"saved":false}
{"ts":1372367254705,"patch":[[{"diffs":[[0,"oken"],[-1,", m"],[1,". M"],[0,"ore "]],"start1":1082,"start2":1082,"length1":11,"length2":11}]],"length":4020,"saved":false}
{"ts":1372367255193,"patch":[[{"diffs":[[0,"e token."],[-1," "],[0,"More spe"]],"start1":1079,"start2":1079,"length1":17,"length2":16}]],"length":4019,"saved":false}
{"ts":1372367256201,"patch":[[{"diffs":[[0,"e token."],[1,"\n    "],[0,"More spe"]],"start1":1079,"start2":1079,"length1":16,"length2":21}]],"length":4024,"saved":false}
{"ts":1372367258680,"patch":[[{"diffs":[[0,"hey must"],[-1,"\n   "],[0," be a va"]],"start1":1117,"start2":1117,"length1":20,"length2":16}]],"length":4020,"saved":false}
{"ts":1372367262099,"patch":[[{"diffs":[[0,"fically,"],[-1," that"],[0," they mu"]],"start1":1102,"start2":1102,"length1":21,"length2":16},{"diffs":[[0,"  E.g.: "],[1,"in"],[0,"\n\nRealiz"]],"start1":1146,"start2":1146,"length1":16,"length2":18}]],"length":4017,"saved":false}
{"ts":1372367263611,"patch":[[{"diffs":[[0,"E.g.: in"],[1,"t, "],[0,"\n\nRealiz"]],"start1":1148,"start2":1148,"length1":16,"length2":19}]],"length":4020,"saved":false}
{"ts":1372367265422,"patch":[[{"diffs":[[0,".: int, "],[1,"32, "],[0,"\n\nRealiz"]],"start1":1151,"start2":1151,"length1":16,"length2":20}]],"length":4024,"saved":false}
{"ts":1372367270308,"patch":[[{"diffs":[[0,"nt, 32, "],[1,"lo32_ys"],[0,"\n\nRealiz"]],"start1":1155,"start2":1155,"length1":16,"length2":23}]],"length":4031,"saved":false}
{"ts":1372367276722,"patch":[[{"diffs":[[0,"Realized"],[1," User typenames:\n"],[0,"\n\nType S"]],"start1":1172,"start2":1172,"length1":16,"length2":33}]],"length":4048,"saved":false}
{"ts":1372367279451,"patch":[[{"diffs":[[0,"enames:\n"],[1,"    \n    The typename will always be prefixed with "],[0,"\n\nType S"]],"start1":1189,"start2":1189,"length1":16,"length2":67}]],"length":4099,"saved":false}
{"ts":1372367283798,"patch":[[{"diffs":[[0,"es:\n    "],[-1,"\n   "],[1,"A typename"],[0," The typ"]],"start1":1193,"start2":1193,"length1":20,"length2":26}]],"length":4105,"saved":false}
{"ts":1372367291531,"patch":[[{"diffs":[[0,"ypename "],[1,"prefixed with the class"],[0,"The type"]],"start1":1204,"start2":1204,"length1":16,"length2":39}]],"length":4128,"saved":false}
{"ts":1372367301136,"patch":[[{"diffs":[[0,"ed with "],[-1,"the"],[1,"a"],[0," class"],[1," name, "],[0,"The type"]],"start1":1218,"start2":1218,"length1":25,"length2":30}]],"length":4133,"saved":false}
{"ts":1372367343760,"patch":[[{"diffs":[[0,"s with '_'.\n"],[1,"    For\n"],[0,"    - (No su"]],"start1":1321,"start2":1321,"length1":24,"length2":32}]],"length":4141,"saved":false}
{"ts":1372367349419,"patch":[[{"diffs":[[0,"\n    For"],[1," realized names, they must start with"],[0,"\n    - ("]],"start1":1332,"start2":1332,"length1":16,"length2":53}]],"length":4178,"saved":false}
{"ts":1372367351964,"patch":[[{"diffs":[[0,"art with"],[1," '__'."],[0,"\n    - ("]],"start1":1369,"start2":1369,"length1":16,"length2":22}]],"length":4184,"saved":false}
{"ts":1372367360180,"patch":[[{"diffs":[[0," be prefixed"],[1,"\n   "],[0," with \n\nType"]],"start1":1264,"start2":1264,"length1":24,"length2":28}]],"length":4188,"saved":false}
{"ts":1372367364007,"patch":[[{"diffs":[[0,"   with "],[1,"'__'"],[0,"\n\nType S"]],"start1":1278,"start2":1278,"length1":16,"length2":20}]],"length":4192,"saved":false}
{"ts":1372367373997,"patch":[[{"diffs":[[0,"s name, "],[1,"method name"],[0,"The type"]],"start1":1232,"start2":1232,"length1":16,"length2":27}]],"length":4203,"saved":false}
{"ts":1372367380023,"patch":[[{"diffs":[[0," a class"],[-1," name"],[0,", method"]],"start1":1225,"start2":1225,"length1":21,"length2":16},{"diffs":[[0," method "],[1,"or "],[0,"name"],[1,"space name."],[0,"The type"]],"start1":1234,"start2":1234,"length1":20,"length2":34}]],"length":4212,"saved":false}
{"ts":1372367381181,"patch":[[{"diffs":[[0,"ce name."],[1,"\n    "],[0,"The type"]],"start1":1252,"start2":1252,"length1":16,"length2":21},{"diffs":[[0,"prefixed"],[-1,"\n    "],[0,"with '__"]],"start1":1293,"start2":1293,"length1":21,"length2":16}]],"length":4212,"saved":false}
{"ts":1372367381923,"patch":[[{"diffs":[[0,"prefixed"],[1," "],[0,"with '__"]],"start1":1293,"start2":1293,"length1":16,"length2":17}]],"length":4213,"saved":false}
{"ts":1372367382417,"patch":[[{"diffs":[[0,"ith '__'"],[1,"."],[0,"\n\nType S"]],"start1":1303,"start2":1303,"length1":16,"length2":17}]],"length":4214,"saved":false}
{"ts":1372367500129,"patch":[[{"diffs":[[0,"th '__'."],[1,"\n    E"],[0,"\n\nType S"]],"start1":1304,"start2":1304,"length1":16,"length2":22}]],"length":4220,"saved":false}
{"ts":1372367503728,"patch":[[{"diffs":[[0,"'.\n    E"],[1,".g.: "],[0,"\n\nType S"]],"start1":1310,"start2":1310,"length1":16,"length2":21}]],"length":4225,"saved":false}
{"ts":1372367513376,"patch":[[{"diffs":[[0,"zed "],[-1,"User typen"],[1,"N"],[0,"ame"],[-1,"s"],[0,":\n  "]],"start1":1177,"start2":1177,"length1":22,"length2":12}]],"length":4215,"saved":false}
{"ts":1372367515390,"patch":[[{"diffs":[[0,"ealized "],[-1,"N"],[1,"User typen"],[0,"ame"],[1,"s"],[0,":\n    A "]],"start1":1173,"start2":1173,"length1":20,"length2":30}]],"length":4225,"saved":false}
{"ts":1372367520577,"patch":[[{"diffs":[[0,"  E.g.: "],[1,"m"],[0,"\n\nType S"]],"start1":1315,"start2":1315,"length1":16,"length2":17}]],"length":4226,"saved":false}
{"ts":1372367521382,"patch":[[{"diffs":[[0," E.g.: m"],[1,"c"],[0,"\n\nType S"]],"start1":1316,"start2":1316,"length1":16,"length2":17}]],"length":4227,"saved":false}
{"ts":1372367523056,"patch":[[{"diffs":[[0,"E.g.: mc"],[1,"_"],[0,"\n\nType S"]],"start1":1317,"start2":1317,"length1":16,"length2":17}]],"length":4228,"saved":false}
{"ts":1372367524152,"patch":[[{"diffs":[[0,".g.: mc_"],[1,"_i"],[0,"\n\nType S"]],"start1":1318,"start2":1318,"length1":16,"length2":18}]],"length":4230,"saved":false}
{"ts":1372367527995,"patch":[[{"diffs":[[0,".: mc__i"],[1,"nt__"],[0,"\n\nType S"]],"start1":1320,"start2":1320,"length1":16,"length2":20}]],"length":4234,"saved":false}
{"ts":1372367529481,"patch":[[{"diffs":[[0,"  E.g.: "],[1,"(Co"],[0,"mc__int_"]],"start1":1315,"start2":1315,"length1":16,"length2":19}]],"length":4237,"saved":false}
{"ts":1372367534674,"patch":[[{"diffs":[[0,".g.: (Co"],[1,"ntainer, name: int"],[0,"mc__int_"]],"start1":1318,"start2":1318,"length1":16,"length2":34}]],"length":4255,"saved":false}
{"ts":1372367541574,"patch":[[{"diffs":[[0,"   E.g.:"],[1," (Scope: mt"],[0," (Contai"]],"start1":1314,"start2":1314,"length1":16,"length2":27}]],"length":4266,"saved":false}
{"ts":1372367549273,"patch":[[{"diffs":[[0,"pe: mt ("],[1,"cdt), "],[0,"Containe"]],"start1":1327,"start2":1327,"length1":16,"length2":22}]],"length":4272,"saved":false}
{"ts":1372367552097,"patch":[[{"diffs":[[0,"t), "],[-1,"Container, name: in"],[0,"tmc_"]],"start1":1337,"start2":1337,"length1":27,"length2":8}]],"length":4253,"saved":false}
{"ts":1372367553152,"patch":[[{"diffs":[[0," (cdt), "],[-1,"t"],[0,"mc__int_"]],"start1":1333,"start2":1333,"length1":17,"length2":16}]],"length":4252,"saved":false}
{"ts":1372367556881,"patch":[[{"diffs":[[0," (cdt), "],[1,"Ty"],[0,"mc__int_"]],"start1":1333,"start2":1333,"length1":16,"length2":18}]],"length":4254,"saved":false}
{"ts":1372367558671,"patch":[[{"diffs":[[0,"cdt), Ty"],[1,"pename: "],[0,"mc__int_"]],"start1":1335,"start2":1335,"length1":16,"length2":24}]],"length":4262,"saved":false}
{"ts":1372367560935,"patch":[[{"diffs":[[0,"pename: "],[1,"int"],[0,"mc__int_"]],"start1":1343,"start2":1343,"length1":16,"length2":19}]],"length":4265,"saved":false}
{"ts":1372367563935,"patch":[[{"diffs":[[0,"ame: int"],[1,", "],[0,"mc__int_"]],"start1":1346,"start2":1346,"length1":16,"length2":18}]],"length":4267,"saved":false}
{"ts":1372367573153,"patch":[[{"diffs":[[0,"c__int__"],[1,"t"],[0,"\n\nType S"]],"start1":1357,"start2":1357,"length1":16,"length2":17}]],"length":4268,"saved":false}
{"ts":1372367582168,"patch":[[{"diffs":[[0,".g.:"],[-1," (Scope: mt (cdt), Typename: int,"],[0," mc_"]],"start1":1318,"start2":1318,"length1":41,"length2":8}]],"length":4235,"saved":false}
{"ts":1372367583824,"patch":[[{"diffs":[[0,"__int__t"],[1," (Scope: mt (cdt), Typename: int,"],[0,"\n\nType S"]],"start1":1325,"start2":1325,"length1":16,"length2":49}]],"length":4268,"saved":false}
{"ts":1372367586349,"patch":[[{"diffs":[[0,"me: int,"],[1," Typ"],[0,"\n\nType S"]],"start1":1358,"start2":1358,"length1":16,"length2":20}]],"length":4272,"saved":false}
{"ts":1372367587943,"patch":[[{"diffs":[[0,"int, Typ"],[1,"e: "],[0,"\n\nType S"]],"start1":1362,"start2":1362,"length1":16,"length2":19}]],"length":4275,"saved":false}
{"ts":1372367589998,"patch":[[{"diffs":[[0,", Type: "],[1,"i "],[0,"\n\nType S"]],"start1":1365,"start2":1365,"length1":16,"length2":18}]],"length":4277,"saved":false}
{"ts":1372367594326,"patch":[[{"diffs":[[0,"Type: i "],[1,"(Iterator))"],[0,"\n\nType S"]],"start1":1367,"start2":1367,"length1":16,"length2":27}]],"length":4288,"saved":false}
{"ts":1372367597258,"patch":[[{"diffs":[[0,"c__int__"],[-1,"t"],[1,"i"],[0," (Scope:"]],"start1":1324,"start2":1324,"length1":17,"length2":17}]],"length":4288,"saved":false}
{"ts":1372367608248,"patch":[[{"diffs":[[0,"nt, Type"],[1,"/Method"],[0,": i (Ite"]],"start1":1363,"start2":1363,"length1":16,"length2":23}]],"length":4295,"saved":false}
